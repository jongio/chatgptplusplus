name: ChatGPT++ Release

# Set explicit permissions for the workflow
permissions:
  contents: write        # Allows read and write access to repository contents, including pushing tags
  id-token: write        # Required for certain authentication flows (optional based on your needs)
  pull-requests: write   # If your workflow interacts with pull requests (optional)

# Trigger the workflow on push to the main branch when manifest.json changes
# and allow manual triggering via the GitHub UI
on:
  push:
    branches:
      - main
    paths:
      - 'manifest.json'
  workflow_dispatch:
    inputs:
      version:
        description: 'Specify the version to release (optional)'
        required: false
        default: ''

jobs:
  release:
    runs-on: windows-latest  # Use a Windows runner for PowerShell

    steps:
      # 1. Checkout the repository with full history to access all commits and tags
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0              # Fetch all history for all branches and tags
          persist-credentials: true   # Persist the GITHUB_TOKEN for git push

      # 2. Retrieve the current version from manifest.json
      - name: Get Current Version
        id: current_version
        shell: pwsh
        run: |
          $manifestPath = 'manifest.json'
          if (Test-Path $manifestPath) {
              $manifest = Get-Content -Raw -Path $manifestPath | ConvertFrom-Json
              $version = $manifest.version
              Write-Output "Current version: $version"
              echo "version=$version" >> $env:GITHUB_OUTPUT
          } else {
              Write-Error "manifest.json not found."
          }

      # 3. Retrieve the previous version from the last commit's manifest.json
      - name: Get Previous Version
        id: previous_version
        shell: pwsh
        run: |
          $previousCommit = "${{ github.event.before }}"
          if ($previousCommit -eq '0000000000000000000000000000000000000000') {
              # This is the initial commit
              $previous_version = '0.0.0'
          } else {
              try {
                  # Attempt to get manifest.json from the previous commit
                  $previous_manifest = git show "${previousCommit}:./manifest.json" 2> $null
                  if ($previous_manifest) {
                      $previous_manifest_json = $previous_manifest | ConvertFrom-Json
                      $previous_version = $previous_manifest_json.version
                  } else {
                      # manifest.json does not exist in the previous commit
                      $previous_version = '0.0.0'
                  }
              } catch {
                  # Error accessing previous manifest.json
                  $previous_version = '0.0.0'
              }
          }
          Write-Output "Previous version: $previous_version"
          echo "previous_version=$previous_version" >> $env:GITHUB_OUTPUT

      # 4. Determine if the workflow was triggered by a push or manually
      - name: Determine Trigger Type
        id: trigger_type
        shell: pwsh
        run: |
          if ("${{ github.event_name }}" -eq 'workflow_dispatch') {
              $manual = $true
          } else {
              $manual = $false
          }
          Write-Output "Manual trigger: $manual"
          echo "manual_trigger=$manual" >> $env:GITHUB_OUTPUT

      # 5. Compare the current and previous versions or use manual version
      - name: Determine Version Increment or Use Manual Version
        id: version_decision
        shell: pwsh
        run: |
          $manual_trigger = "${{ steps.trigger_type.outputs.manual_trigger }}"
          if ($manual_trigger -eq 'True') {
              $manual_version = "${{ github.event.inputs.version }}"
              if ($manual_version -ne '') {
                  Write-Output "Manual version specified: $manual_version"
                  echo "final_version=$manual_version" >> $env:GITHUB_OUTPUT
              } else {
                  # If no manual version is specified, use the current version
                  $current = "${{ steps.current_version.outputs.version }}"
                  Write-Output "No manual version specified. Using current version: $current"
                  echo "final_version=$current" >> $env:GITHUB_OUTPUT
              }
              echo "incremented=true" >> $env:GITHUB_OUTPUT  # Treat as incremented for manual trigger
          } else {
              # Automatic trigger: check if version has incremented
              $current = "${{ steps.current_version.outputs.version }}"
              $previous = "${{ steps.previous_version.outputs.previous_version }}"
              Write-Output "Current: $current, Previous: $previous"

              function Compare-Version($v1, $v2) {
                  try {
                      [System.Version]$version1 = $v1
                      [System.Version]$version2 = $v2
                      return $version1.CompareTo($version2)
                  } catch {
                      # If version format is invalid, treat as not incremented
                      return -1
                  }
              }

              $cmp = Compare-Version $current $previous
              if ($cmp -gt 0) {
                  Write-Output "Version incremented."
                  echo "incremented=true" >> $env:GITHUB_OUTPUT
                  echo "final_version=$current" >> $env:GITHUB_OUTPUT
              } else {
                  Write-Output "Version not incremented."
                  echo "incremented=false" >> $env:GITHUB_OUTPUT
                  echo "final_version=" >> $env:GITHUB_OUTPUT
              }
          }

      # 6. Get Commit Messages since the last release
      - name: Get Commit Messages Since Last Release
        id: commit_messages
        shell: pwsh
        run: |
          # Fetch all tags to ensure they are available
          git fetch --tags

          # Get the latest tag
          $lastTag = git describe --tags --abbrev=0 2> $null
          if ($lastTag) {
              Write-Output "Last tag found: $lastTag"
              # Get commit messages since the last tag
              $commitMessages = git log "$lastTag"..HEAD --pretty=format:"- %s"
          } else {
              Write-Output "No previous tags found. Listing all commit messages."
              # No tags found, list all commit messages
              $commitMessages = git log --pretty=format:"- %s"
          }

          if ([string]::IsNullOrWhiteSpace($commitMessages)) {
              $commitMessages = "No commit messages found since the last release."
          }

          Write-Output "Commit messages since last release:"
          Write-Output $commitMessages
          echo "commit_messages=$commitMessages" >> $env:GITHUB_OUTPUT

      # 7. Run the packaging script if the version has incremented or manually triggered
      - name: Run package.ps1
        id: package
        if: steps.version_decision.outputs.incremented == 'true'
        shell: pwsh
        run: |
          ./package.ps1
          # Assuming package.ps1 outputs the zip to the .dist folder
          $version = "${{ steps.version_decision.outputs.final_version }}"
          $zipFile = "chatgptplusplus-$version.zip"
          $zipPath = ".dist/$zipFile"
          if (Test-Path $zipPath) {
              Write-Output "Zip file: $zipPath"
              echo "zip_file=$zipPath" >> $env:GITHUB_OUTPUT
          } else {
              Write-Error "Expected zip file not found: $zipPath"
          }

      # 8. Create or Update GitHub Release
      - name: Create or Update GitHub Release
        if: steps.version_decision.outputs.incremented == 'true'
        id: create_or_update_github_release
        uses: actions/github-script@v6
        with:
          script: |
            const tag = 'v${{ steps.version_decision.outputs.final_version }}';
            const releaseName = `ChatGPT++ Release v${{ steps.version_decision.outputs.final_version }}`;
            const body = `## ChatGPT++ Release v${{ steps.version_decision.outputs.final_version }}\n\n### What's Changed\n${{ steps.commit_messages.outputs.commit_messages }}`;

            let release;
            try {
              release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
              console.log(`Found existing release: ${release.data.name}`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`No existing release found for tag ${tag}. Creating a new release.`);
              } else {
                throw error;
              }
            }

            let release_id;

            if (release) {
              // Update the existing release
              const updatedRelease = await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                name: releaseName,
                body: body,
                draft: false,
                prerelease: false
              });
              console.log(`Updated release: ${releaseName}`);
              release_id = updatedRelease.data.id;
            } else {
              // Create a new release
              const newRelease = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: releaseName,
                body: body,
                draft: false,
                prerelease: false
              });
              console.log(`Created new release: ${releaseName}`);
              release_id = newRelease.data.id;
            }

            // Set outputs using Environment Files
            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `release_id=${release_id}\n`);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 9. Upload the generated .zip file as a release asset using github-script
      - name: Upload Release Asset
        if: steps.version_decision.outputs.incremented == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const release_id = '${{ steps.create_or_update_github_release.outputs.release_id }}';
            const filePath = '${{ steps.package.outputs.zip_file }}';
            const fileName = path.basename(filePath);
            const contentType = 'application/zip';
            const fileData = fs.readFileSync(filePath);

            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release_id,
              name: fileName,
              data: fileData,
              headers: {
                'content-type': contentType,
                'content-length': fileData.length
              }
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
